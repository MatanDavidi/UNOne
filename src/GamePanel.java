
import java.awt.Component;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.file.Paths;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/*
 * Copyright (C) 2018 Matan Davidi
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/**
 * TODO: 
 * - Center cards whenever form is resized (or always)
 * - Add game functionality
 *
 * @author Matan Davidi
 */
public class GamePanel extends javax.swing.JPanel implements UNOListener {

    private Game mainGame;

    /**
     * Creates new form GamePanel
     */
    public GamePanel() {
        initComponents();
        mainGame = new Game(4, this);
        mainGame.addUnoListener(this);
        mainGame.addPlayer(new Hand(JOptionPane.showInputDialog("Please insert a name for your character")));
        mainGame.addPlayer(new Hand(JOptionPane.showInputDialog("Please insert a name for your first opponent")));
        mainGame.addPlayer(new Hand(JOptionPane.showInputDialog("Please insert a name for your second opponent")));
        mainGame.addPlayer(new Hand(JOptionPane.showInputDialog("Please insert a name for your third opponent")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        playerOnePanel = new javax.swing.JPanel();
        playerTwoPanel = new javax.swing.JPanel();
        playerThreePanel = new javax.swing.JPanel();
        playerFourPanel = new javax.swing.JPanel();
        deckPanel = new javax.swing.JPanel();
        deckButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        playerOnePanel.setMinimumSize(new java.awt.Dimension(150, 150));
        playerOnePanel.setName(""); // NOI18N
        playerOnePanel.setLayout(new javax.swing.BoxLayout(playerOnePanel, javax.swing.BoxLayout.LINE_AXIS));
        add(playerOnePanel, java.awt.BorderLayout.PAGE_END);

        playerTwoPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        playerTwoPanel.setLayout(new javax.swing.BoxLayout(playerTwoPanel, javax.swing.BoxLayout.LINE_AXIS));
        add(playerTwoPanel, java.awt.BorderLayout.NORTH);
        playerTwoPanel.getAccessibleContext().setAccessibleParent(this);

        playerThreePanel.setLayout(new javax.swing.BoxLayout(playerThreePanel, javax.swing.BoxLayout.PAGE_AXIS));
        add(playerThreePanel, java.awt.BorderLayout.WEST);

        playerFourPanel.setLayout(new javax.swing.BoxLayout(playerFourPanel, javax.swing.BoxLayout.PAGE_AXIS));
        add(playerFourPanel, java.awt.BorderLayout.EAST);

        deckPanel.setLayout(new java.awt.GridLayout(1, 2));

        deckButton.setText("Draw");
        deckButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deckButtonMouseClicked(evt);
            }
        });
        deckPanel.add(deckButton);

        add(deckPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void deckButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deckButtonMouseClicked
        mainGame.draw(1);
    }//GEN-LAST:event_deckButtonMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deckButton;
    private javax.swing.JPanel deckPanel;
    private javax.swing.JPanel playerFourPanel;
    private javax.swing.JPanel playerOnePanel;
    private javax.swing.JPanel playerThreePanel;
    private javax.swing.JPanel playerTwoPanel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void cardAdded(Card source, int playerIndex) {

        try {

            File cardFile;
            BufferedImage cardImg;
            JLabel newCard;
            int cardWidth = 180;
            int cardHeight = 252;

            switch (playerIndex) {

                case 0:
                    cardFile = Paths.get("Images", source + ".png").toFile();
                    cardImg = ImageIO.read(cardFile);
                    newCard = new JLabel(new ImageIcon(ImageHelper.getScaledImage(cardImg, cardWidth / 2, cardHeight)));
                    newCard.setAlignmentX(Component.CENTER_ALIGNMENT);
                    playerOnePanel.add(newCard);
                    playerOnePanel.revalidate();
                    playerOnePanel.repaint();
                    break;

                case 1:
                    cardFile = Paths.get("Images", "cardback180.png").toFile();
                    cardImg = ImageIO.read(cardFile);
                    newCard = new JLabel(new ImageIcon(ImageHelper.getScaledImage(cardImg, cardWidth / 2, cardHeight)));
                    newCard.setAlignmentX(Component.CENTER_ALIGNMENT);
                    playerTwoPanel.add(newCard);
                    playerTwoPanel.revalidate();
                    playerTwoPanel.repaint();
                    break;

                case 2:
                    cardFile = Paths.get("Images", "cardback270.png").toFile();
                    cardImg = ImageIO.read(cardFile);
                    newCard = new JLabel(new ImageIcon(ImageHelper.getScaledImage(cardImg, cardHeight / 2, cardWidth / 2)));
                    newCard.setAlignmentY(Component.CENTER_ALIGNMENT);
                    playerThreePanel.add(newCard);
                    playerThreePanel.revalidate();
                    playerThreePanel.repaint();
                    break;

                case 3:
                    cardFile = Paths.get("Images", "cardback90.png").toFile();
                    cardImg = ImageIO.read(cardFile);
                    newCard = new JLabel(new ImageIcon(ImageHelper.getScaledImage(cardImg, cardHeight / 2, cardWidth / 2)));
                    newCard.setAlignmentY(Component.CENTER_ALIGNMENT);
                    playerFourPanel.add(newCard);
                    playerFourPanel.revalidate();
                    playerFourPanel.repaint();
                    break;

            }

            System.out.println("Added card to player's hand");

            repaint();

        } catch (IOException ioe) {

            System.out.println("Couldn't find card image: the card will not be added to the player's hand");

        }

    }
}
